---
version: '3'

tasks:
  run:
    deps:
      - check:poetry
    desc: Runs the {{Name}} project
    cmds:
      - poetry run python run.py

  install:
    deps:
      - check:poetry
    desc: Install dependencies for the {{Name}} project
    cmds:
      - poetry install

  test:
    deps:
      - check:poetry
    desc: Run tests for the {{Name}} project
    cmds:
      - poetry run pytest

  test:tox:
    deps:
      - check:poetry
    desc: Run {{Name}} tests for multiple Python versions (defined in tox.ini).
    cmds:
      - poetry run tox

  build:
    deps:
      - check:poetry
    desc: Build the {{Name}} project
    cmds:
      - rm -rf dist
      - poetry build

  build:binary:
    desc: Builds standalone binary for the {{Name}} project
    cmds:
      - poetry run python -OO -m PyInstaller -F run.py
      - mv ./dist/run ./dist/{{Name}}

  clean:
    deps:
      - check:poetry
    desc: Clean the {{Name}} project's dist and build folders
    cmds:
      - rm -rf dist
      - rm -rf build

  publish:
    deps:
      - check:poetry
    desc: Publish the {{Name}} project to PyPI
    cmds:
      - poetry publish

  format:
    deps:
      - check:poetry
    desc: Style and format {{Name}} project's code
    cmds: |
      poetry run flake8 {{Name}}
      poetry run autoflake \
        --imports=arrow,sphinx,rich,fire,requests,aiohttp,schema,click,celery,better-exceptions,sh,schedule,furl \
        --in-place -r {{Name}}
      potry run autopep8 --in-place --aggressive --aggressive -r {{Name}}
      poetry run black {{Name}}

  format:docs:
    deps:
      - check:poetry
    desc: Check compliance with Python docstring conventions.
    cmds:
      - poetry run pydocstyle {{.CLI_ARGS}}

  check:typing:
    deps:
      - check:poetry
    desc: Check static typing
    cmds:
      - poetry run mypy {{.CLI_ARGS}}

  update:version:
    deps:
      - check:jq
    desc: Updates the py package version so that it matches the one in package.json
    cmds:
      - cat package.json | jq .version
      - sed -E '/^__version__/d' < ./{{Name}}/__init__.py > ./{{Name}}/__init2__.py
      - echo "__version__ =" `cat package.json | jq .version` >> ./{{Name}}/__init2__.py
      - mv ./{{Name}}/__init2__.py ./{{Name}}/__init__.py

  security:check:
    deps:
      - check:poetry
    desc: Check {{Name}} project's code for security issues
    cmds:
      - poetry run bandit {{Name}}

  docker:build:
    deps:
      - check:docker
      - check:jq
    desc: Builds docker image
    cmds: |
      version=$(package.json | jq .version)
      docker build -t {{Name}}:$version .

  docker:publish:
    deps:
      - check:docker
      - check:jq
    desc: Publishes docker image
    cmds: |
      version=$(package.json | jq .version)
      docker push {{Name}}:$version

  docker:test:
    deps:
      - check:docker
      - check:jq
    desc: Sets up the project and runs unit tests in a Docker container
    cmds: |
      version=$(package.json | jq .version)
      docker run --name {{Name}}-tests --entrypoint "/venv/bin/python -m unittest discover" --rm {{Name}}:$version

  check:poetry:
    # desc: Check that poetry is in the system
    preconditions:
      - |
        if ! command -v poetry &> /dev/null
        then
          echo "poetry could not be found"
          exit 1
        fi

  check:jq:
    # desc: Check that jq is in the system
    preconditions:
      - |
        if ! command -v jq &> /dev/null
        then
          echo "jq could not be found"
          exit 1
        fi

  check:docker:
    # desc: Check that docker is in the system
    preconditions:
      - |
        if ! command -v docker &> /dev/null
        then
          echo "docker could not be found"
          exit 1
        fi
